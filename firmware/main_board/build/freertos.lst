ARM GAS  /tmp/ccN2TjFH.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	StartDefaultTask:
  26              	.LFB137:
  27              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** /* USER CODE END Includes */
  30:Core/Src/freertos.c **** 
  31:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccN2TjFH.s 			page 2


  32:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* USER CODE END PTD */
  35:Core/Src/freertos.c **** 
  36:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* USER CODE END PD */
  40:Core/Src/freertos.c **** 
  41:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* USER CODE END PM */
  45:Core/Src/freertos.c **** 
  46:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* USER CODE END Variables */
  50:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  51:Core/Src/freertos.c **** 
  52:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  54:Core/Src/freertos.c **** 
  55:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  56:Core/Src/freertos.c **** 
  57:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  62:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  65:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  66:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  67:Core/Src/freertos.c **** 
  68:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  69:Core/Src/freertos.c **** {
  70:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  71:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  72:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  73:Core/Src/freertos.c ****   /* place for user code */
  74:Core/Src/freertos.c **** }
  75:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  76:Core/Src/freertos.c **** 
  77:Core/Src/freertos.c **** /**
  78:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  79:Core/Src/freertos.c ****   * @param  None
  80:Core/Src/freertos.c ****   * @retval None
  81:Core/Src/freertos.c ****   */
  82:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  83:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  84:Core/Src/freertos.c **** 
  85:Core/Src/freertos.c ****   /* USER CODE END Init */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  88:Core/Src/freertos.c ****   /* add mutexes, ... */
ARM GAS  /tmp/ccN2TjFH.s 			page 3


  89:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  90:Core/Src/freertos.c **** 
  91:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  92:Core/Src/freertos.c ****   /* add semaphores, ... */
  93:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
  94:Core/Src/freertos.c **** 
  95:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
  96:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
  97:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
  98:Core/Src/freertos.c **** 
  99:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 100:Core/Src/freertos.c ****   /* add queues, ... */
 101:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 102:Core/Src/freertos.c **** 
 103:Core/Src/freertos.c ****   /* Create the thread(s) */
 104:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 105:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 106:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 107:Core/Src/freertos.c **** 
 108:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 109:Core/Src/freertos.c ****   /* add threads, ... */
 110:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 111:Core/Src/freertos.c **** 
 112:Core/Src/freertos.c **** }
 113:Core/Src/freertos.c **** 
 114:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 115:Core/Src/freertos.c **** /**
 116:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 117:Core/Src/freertos.c ****   * @param  argument: Not used
 118:Core/Src/freertos.c ****   * @retval None
 119:Core/Src/freertos.c ****   */
 120:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 121:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 122:Core/Src/freertos.c **** {
  28              		.loc 1 122 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              	.LVL1:
  40              	.L2:
 123:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 124:Core/Src/freertos.c ****   /* Infinite loop */
 125:Core/Src/freertos.c ****   for(;;)
 126:Core/Src/freertos.c ****   {
 127:Core/Src/freertos.c ****     osDelay(1);
  41              		.loc 1 127 0 discriminator 1
  42 0002 0120     		movs	r0, #1
  43 0004 FFF7FEFF 		bl	osDelay
  44              	.LVL2:
  45 0008 FBE7     		b	.L2
ARM GAS  /tmp/ccN2TjFH.s 			page 4


  46              		.cfi_endproc
  47              	.LFE137:
  49              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  50              		.align	1
  51              		.global	vApplicationGetIdleTaskMemory
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu fpv4-sp-d16
  57              	vApplicationGetIdleTaskMemory:
  58              	.LFB135:
  69:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  59              		.loc 1 69 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL3:
  70:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  65              		.loc 1 70 0
  66 0000 034B     		ldr	r3, .L5
  67 0002 0360     		str	r3, [r0]
  71:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  68              		.loc 1 71 0
  69 0004 034B     		ldr	r3, .L5+4
  70 0006 0B60     		str	r3, [r1]
  72:Core/Src/freertos.c ****   /* place for user code */
  71              		.loc 1 72 0
  72 0008 8023     		movs	r3, #128
  73 000a 1360     		str	r3, [r2]
  74:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  74              		.loc 1 74 0
  75 000c 7047     		bx	lr
  76              	.L6:
  77 000e 00BF     		.align	2
  78              	.L5:
  79 0010 00000000 		.word	.LANCHOR0
  80 0014 00000000 		.word	.LANCHOR1
  81              		.cfi_endproc
  82              	.LFE135:
  84              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
  85              		.align	1
  86              		.global	MX_FREERTOS_Init
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	MX_FREERTOS_Init:
  93              	.LFB136:
  82:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  94              		.loc 1 82 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 32
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 30B5     		push	{r4, r5, lr}
  99              	.LCFI1:
 100              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccN2TjFH.s 			page 5


 101              		.cfi_offset 4, -12
 102              		.cfi_offset 5, -8
 103              		.cfi_offset 14, -4
 104 0002 89B0     		sub	sp, sp, #36
 105              	.LCFI2:
 106              		.cfi_def_cfa_offset 48
 105:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 107              		.loc 1 105 0
 108 0004 01AC     		add	r4, sp, #4
 109 0006 074D     		ldr	r5, .L9
 110 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 111 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 112 000c 95E80700 		ldm	r5, {r0, r1, r2}
 113 0010 84E80700 		stm	r4, {r0, r1, r2}
 106:Core/Src/freertos.c **** 
 114              		.loc 1 106 0
 115 0014 0021     		movs	r1, #0
 116 0016 01A8     		add	r0, sp, #4
 117 0018 FFF7FEFF 		bl	osThreadCreate
 118              	.LVL4:
 119 001c 024B     		ldr	r3, .L9+4
 120 001e 1860     		str	r0, [r3]
 112:Core/Src/freertos.c **** 
 121              		.loc 1 112 0
 122 0020 09B0     		add	sp, sp, #36
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 12
 125              		@ sp needed
 126 0022 30BD     		pop	{r4, r5, pc}
 127              	.L10:
 128              		.align	2
 129              	.L9:
 130 0024 00000000 		.word	.LANCHOR2
 131 0028 00000000 		.word	defaultTaskHandle
 132              		.cfi_endproc
 133              	.LFE136:
 135              		.comm	defaultTaskHandle,4,4
 136              		.section	.rodata
 137              		.align	2
 138              		.set	.LANCHOR2,. + 0
 139              	.LC2:
 140 0000 00000000 		.word	.LC0
 141 0004 00000000 		.word	StartDefaultTask
 142 0008 0000     		.short	0
 143 000a 0000     		.space	2
 144 000c 00000000 		.word	0
 145 0010 80000000 		.word	128
 146 0014 00000000 		.word	0
 147 0018 00000000 		.word	0
 148              		.section	.bss.xIdleStack,"aw",%nobits
 149              		.align	2
 150              		.set	.LANCHOR1,. + 0
 153              	xIdleStack:
 154 0000 00000000 		.space	512
 154      00000000 
 154      00000000 
 154      00000000 
ARM GAS  /tmp/ccN2TjFH.s 			page 6


 154      00000000 
 155              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 156              		.align	2
 157              		.set	.LANCHOR0,. + 0
 160              	xIdleTaskTCBBuffer:
 161 0000 00000000 		.space	84
 161      00000000 
 161      00000000 
 161      00000000 
 161      00000000 
 162              		.section	.rodata.str1.4,"aMS",%progbits,1
 163              		.align	2
 164              	.LC0:
 165 0000 64656661 		.ascii	"defaultTask\000"
 165      756C7454 
 165      61736B00 
 166              		.text
 167              	.Letext0:
 168              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 169              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 170              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 171              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 172              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 173              		.file 7 "Core/Inc/FreeRTOSConfig.h"
 174              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 175              		.file 9 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 176              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 177              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccN2TjFH.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/ccN2TjFH.s:18     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccN2TjFH.s:25     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccN2TjFH.s:50     .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/ccN2TjFH.s:57     .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/ccN2TjFH.s:79     .text.vApplicationGetIdleTaskMemory:0000000000000010 $d
     /tmp/ccN2TjFH.s:85     .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccN2TjFH.s:92     .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccN2TjFH.s:130    .text.MX_FREERTOS_Init:0000000000000024 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccN2TjFH.s:137    .rodata:0000000000000000 $d
     /tmp/ccN2TjFH.s:149    .bss.xIdleStack:0000000000000000 $d
     /tmp/ccN2TjFH.s:153    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/ccN2TjFH.s:156    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/ccN2TjFH.s:160    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer
     /tmp/ccN2TjFH.s:163    .rodata.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
osDelay
osThreadCreate
